{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"menu",
				"menuLayer"
			],
			[
				"me",
				"menuButton"
			],
			[
				"puz",
				"puzzleLayer"
			],
			[
				"key",
				"keyboardTexture"
			],
			[
				"keyboar",
				"keyboardLayer"
			],
			[
				"setP",
				"setPositionX"
			],
			[
				"keybo",
				"keyboardLayer"
			],
			[
				"Q_KEYBOARD_",
				"Q_KEYBOARD_KEY_Y_GAP"
			],
			[
				"Q_KE",
				"Q_KEYBOARD_KEY_HEIGHT"
			],
			[
				"Q_BA",
				"Q_BANNER_HEIGHT"
			],
			[
				"Q_MEN",
				"Q_MENUBTN_SIZE"
			],
			[
				"Q_CU",
				"Q_CURRENT_BORDER_RADIUS"
			],
			[
				"def",
				"define"
			],
			[
				"comm",
				"comm-section	Comment - Full section comment"
			],
			[
				"cmm",
				"comm-block	Comment - Block style comment"
			],
			[
				"update",
				"updateText"
			],
			[
				"scale",
				"scaleY"
			],
			[
				"setS",
				"setScaleY"
			],
			[
				"sca",
				"scaleX"
			],
			[
				"COL",
				"Color4B"
			],
			[
				"draw",
				"drawColor"
			],
			[
				"new",
				"newVal"
			],
			[
				"anim",
				"animateChange"
			],
			[
				"gam",
				"gameBounds"
			],
			[
				"get",
				"getPositionY"
			],
			[
				"men",
				"menuButtonOffset"
			],
			[
				"add",
				"addChild"
			],
			[
				"updat",
				"updateFromModel"
			],
			[
				"keyb",
				"keyboardUp"
			],
			[
				"start",
				"stepStart"
			],
			[
				"step",
				"stepsLayer"
			],
			[
				"ste",
				"stepsTextAction"
			],
			[
				"setPo",
				"setPositionY"
			],
			[
				"getPo",
				"getPositionY"
			],
			[
				"ove",
				"overPar"
			],
			[
				"sub",
				"subtextSize"
			],
			[
				"set",
				"setPositionY"
			],
			[
				"undo",
				"undoSize"
			],
			[
				"banne",
				"bannerButton"
			],
			[
				"bann",
				"bannerButton"
			],
			[
				"he",
				"_height"
			],
			[
				"comm-",
				"comm-section	Comment - Full section comment"
			],
			[
				"puzz",
				"puzzleManager"
			],
			[
				"par",
				"parDifferenceRating"
			],
			[
				"ran",
				"randomIndex"
			],
			[
				"star",
				"startAddress"
			],
			[
				"sta",
				"startAddress"
			],
			[
				"end",
				"endAddress"
			],
			[
				"endI",
				"endIndex"
			],
			[
				"st",
				"startIndex"
			],
			[
				"puzzl",
				"puzzleBytes"
			],
			[
				"pu",
				"puzzleBytes"
			],
			[
				"hea",
				"headerAddress"
			],
			[
				"head",
				"headerAddress"
			],
			[
				"beg",
				"beginAddress"
			],
			[
				"fir",
				"firstBytes"
			],
			[
				"Puzzl",
				"PuzzleManager"
			],
			[
				"to",
				"to_IDLE"
			],
			[
				"Solv",
				"SolverTouchInputManager"
			],
			[
				"chan",
				"changeWord"
			],
			[
				"sol",
				"solutionLayer"
			],
			[
				"d",
				"dictionary"
			],
			[
				"lett",
				"letterLabel"
			],
			[
				"to_",
				"to_CHOOSING_LETTER"
			],
			[
				"point",
				"pointInKeyboard"
			],
			[
				"pointIn",
				"pointInCurrentWord"
			],
			[
				"poin",
				"pointInCurrentWord"
			],
			[
				"en",
				"enabled"
			],
			[
				"ke",
				"keyboardLayer"
			],
			[
				"Solver",
				"SolverStateController"
			],
			[
				"k",
				"keyboardLayer"
			],
			[
				"le",
				"letterForPoint"
			],
			[
				"game",
				"gameBounds"
			],
			[
				"sel",
				"selected"
			],
			[
				"bor",
				"borderWidth"
			],
			[
				"font",
				"fontSize"
			],
			[
				"Rec",
				"RectRadius"
			],
			[
				"bord",
				"borderRadius"
			],
			[
				"bo",
				"borderRadius"
			],
			[
				"fontWidth",
				"fontWidth"
			],
			[
				"fontH",
				"fontHeightHalf"
			],
			[
				"lette",
				"letterPool"
			],
			[
				"fon",
				"fontWidth"
			],
			[
				"let",
				"letterLabel"
			],
			[
				"g",
				"generateBounds"
			],
			[
				"frame",
				"frameSize"
			],
			[
				"border",
				"borderWidth"
			],
			[
				"Theme",
				"themeName"
			],
			[
				"word",
				"wordLetter"
			],
			[
				"wo",
				"wordLetter"
			],
			[
				"whol",
				"wholeBounds"
			],
			[
				"re",
				"rectContainsPoint"
			],
			[
				"fade",
				"fadeIn"
			],
			[
				"fad",
				"fadeIn"
			],
			[
				"cu",
				"currentWord"
			],
			[
				"curr",
				"currentLetter"
			],
			[
				"curren",
				"currentWord"
			],
			[
				"currn",
				"currentLetter"
			],
			[
				"last",
				"lastColumn"
			],
			[
				"curre",
				"currentLetter"
			],
			[
				"on",
				"onBoard"
			],
			[
				"sli",
				"sliderEnabled"
			],
			[
				"gap",
				"horizontalGap"
			],
			[
				"ho",
				"horizontalGap"
			],
			[
				"right",
				"rightIcon"
			],
			[
				"selecte",
				"selectedButton"
			],
			[
				"butt",
				"buttonFontSize"
			],
			[
				"but",
				"buttonFontSize"
			],
			[
				"bu",
				"buttonWidth"
			],
			[
				"pr",
				"prevTheme"
			],
			[
				"lef",
				"leftIcon"
			],
			[
				"sele",
				"_selected"
			],
			[
				"ind",
				"closestIndex"
			],
			[
				"clos",
				"closestIndex"
			],
			[
				"bas",
				"baseY"
			],
			[
				"text",
				"textColor"
			],
			[
				"_cu",
				"_currentIndex"
			],
			[
				"_tim",
				"_timeStarted"
			],
			[
				"getThem",
				"getTheme"
			],
			[
				"tex",
				"textLabel"
			],
			[
				"_start",
				"_startTime"
			],
			[
				"_sp",
				"_specialText"
			],
			[
				"av",
				"averageSolveTime"
			],
			[
				"_a",
				"_averageSolveTime"
			],
			[
				"_pu",
				"_puzzlesPlayed"
			],
			[
				"ri",
				"rightSize"
			],
			[
				"lf",
				"leftSize"
			],
			[
				"righ",
				"rightLabel"
			]
		]
	},
	"buffers":
	[
		{
			"file": "cpp/Classes/Constants.h",
			"settings":
			{
				"buffer_size": 10457,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/artemis/.i3/config",
			"settings":
			{
				"buffer_size": 5441,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/cocos2d/cocos/renderer/ccShader_PositionColorLengthTexture.frag",
			"settings":
			{
				"buffer_size": 1755,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 7235,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/input/KeyboardLayer.h",
			"settings":
			{
				"buffer_size": 1262,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/GameScene.cpp",
			"settings":
			{
				"buffer_size": 1865,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/MenuButtonLayer.h",
			"settings":
			{
				"buffer_size": 484,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/PuzzleLayer.cpp",
			"settings":
			{
				"buffer_size": 13068,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/menu/MenuLayer.h",
			"settings":
			{
				"buffer_size": 1006,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/menu/MenuLayer.cpp",
			"settings":
			{
				"buffer_size": 1359,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/PuzzleLayer.h",
			"settings":
			{
				"buffer_size": 8824,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/GameScene.h",
			"settings":
			{
				"buffer_size": 1472,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/input/BorderedWordNode.cpp",
			"settings":
			{
				"buffer_size": 3198,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/input/BorderedWordNode.h",
			"settings":
			{
				"buffer_size": 806,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/input/WordNode.cpp",
			"settings":
			{
				"buffer_size": 3214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/input/UndoButtonLayer.h",
			"settings":
			{
				"buffer_size": 427,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/input/KeyboardLayer.cpp",
			"settings":
			{
				"buffer_size": 3878,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/info/banner/BannerButtonLayer.cpp",
			"settings":
			{
				"buffer_size": 3784,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/input/WordNode.h",
			"settings":
			{
				"buffer_size": 1939,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 53 files for \"MenuButton\"\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/GameScene.cpp:\n    4  #include \"BackgroundLayer.h\"\n    5  #include \"solver/PuzzleLayer.h\"\n    6: #include \"menu/MenuButton.h\"\n    7  \n    8  namespace QUAT {\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/menu/MenuButton.cpp:\n    1: #include \"MenuButton.h\"\n    2  \n    3  #include <string>\n    .\n    7  namespace QUAT {\n    8  \n    9: void MenuButton::entered() {\n   10      this->selected(true);\n   11  }\n   12  \n   13: void MenuButton::left() {\n   14      this->selected(false);\n   15  }\n   16  \n   17: cocos2d::Rect * MenuButton::getBounds() {\n   18      return this->bounds;\n   19  }\n   ..\n   23  * is highlighted.\n   24  */\n   25: void MenuButton::selected(bool selected) {\n   26      this->background->setColor(selected ? *this->selectedColor : *this->defaultColor);\n   27      this->_selected = selected;\n   ..\n   29  \n   30  \n   31: bool MenuButton::isSelected() {\n   32      return this->_selected;\n   33  }\n   34  \n   35: void MenuButton::showBorder(bool showBorder) {\n   36      this->border->setVisible(showBorder);\n   37      this->background->setVisible(showBorder);\n   ..\n   41  * Sets the text of the button.\n   42  */\n   43: void MenuButton::setText(std::string text) {\n   44      this->textLabel->setString(text);\n   45  }\n   46  \n   47: const std::string MenuButton::getText() {\n   48      return this->textLabel->getString();\n   49  }\n   50  \n   51: MenuButton * MenuButton::create(std::string title, \n   52                 float fontSize, \n   53                 float width, \n   ..\n   55                 std::function<void(void)> callback)\n   56  {\n   57:     MenuButton *pRet = new(std::nothrow) MenuButton(title, \n   58                                                      fontSize, \n   59                                                      width, \n   ..\n   74  \n   75  \n   76: bool MenuButton::init() {\n   77  	// Init the super class\n   78      if ( !Clickable::init() )\n   ..\n   85  \n   86      this->upCallback = this->callback;\n   87:     this->enterCallback = CC_CALLBACK_0(MenuButton::entered, this);\n   88:     this->leaveCallback = CC_CALLBACK_0(MenuButton::left, this);\n   89  \n   90      this->textLabel = cocos2d::Label::createWithTTF(this->title, Q_FONT_PATH, this->fontSize);\n   ..\n  114  }\n  115  \n  116: MenuButton::MenuButton(std::string title, \n  117                 float fontSize, \n  118                 float width, \n\n/home/artemis/Developer/quat-mobile/cpp/Classes/menu/MenuButton.h:\n   10  namespace QUAT {\n   11  \n   12: class MenuButton : public Clickable\n   13  {\n   14  private:\n   ..\n   70  	const std::string getText();\n   71  	\n   72: 	MenuButton(std::string title, \n   73  			   float fontSize, \n   74  			   float width, \n   ..\n   76  			   std::function<void(void)> callback);\n   77  	\n   78: 	static MenuButton * create(std::string title, \n   79  							   float fontSize, \n   80  							   float width, \n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.cpp:\n    1: #include \"MenuButtonLayer.h\"\n    2  \n    3  namespace QUAT {\n    4: void MenuButtonLayer::up() {\n    5  	cocos2d::log(\"Clicked menu button\");\n    6  }\n    7  \n    8: void MenuButtonLayer::entered() {\n    9  }\n   10: void MenuButtonLayer::left() {\n   11  }\n   12: bool MenuButtonLayer::init() {\n   13  	// Init the super class\n   14      if ( !Clickable::init() )\n   ..\n   17      }\n   18  \n   19:     this->enterCallback = CC_CALLBACK_0(MenuButtonLayer::entered, this);\n   20:     this->leaveCallback = CC_CALLBACK_0(MenuButtonLayer::left, this);\n   21:     this->upCallback = CC_CALLBACK_0(MenuButtonLayer::up, this);\n   22  \n   23      this->circle = RectRadius::create(this->_size, \n   ..\n   38  }\n   39  \n   40: void MenuButtonLayer::recalculateBounds() {\n   41      this->bounds->setRect(this->getPositionX() - this->_size, \n   42                            this->getPositionY() - this->_size, \n   ..\n   46  \n   47  \n   48: MenuButtonLayer::MenuButtonLayer(float size) {\n   49  	this->_size = size;\n   50  }\n   51  \n   52: MenuButtonLayer * MenuButtonLayer::create(float size)\n   53  {\n   54:     MenuButtonLayer *pRet = new(std::nothrow) MenuButtonLayer(size);\n   55      if (pRet && pRet->init())\n   56      {\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.h:\n    9  namespace QUAT {\n   10  \n   11: class MenuButtonLayer : public Clickable\n   12  {\n   13  private:\n   ..\n   23  	bool init();\n   24  	\n   25: 	MenuButtonLayer(float size);\n   26  	\n   27: 	static MenuButtonLayer * create(float size);\n   28  };\n   29  \n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.cpp:\n  245      this->addChild(this->stepsLayer);\n  246  \n  247:     float menuButtonSize   = width * Q_MENUBTN_SIZE,\n  248:           menuButtonOffset = width * Q_MENUBTN_OFFSET;\n  249:     this->menuButton = MenuButtonLayer::create(menuButtonSize);\n  250:     this->menuButton->setPositionX(menuButtonOffset);\n  251:     this->menuButton->setPositionY(height - menuButtonOffset);\n  252:     this->addChild(this->menuButton);\n  253      \n  254      /*=====  End of Initialization of GUI elements  ======*/\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.h:\n    9  // General menu button, not really sure if this should be used in this class\n   10  // yet but it's fine for right now\n   11: #include \"MenuButtonLayer.h\"\n   12  \n   13  // All of the elements necessary for input to the game state\n   ..\n   62  	// Menu button that the user can press to reach the \"menu\", an about screen\n   63  	// with statistics and other information about the game.\n   64: 	MenuButtonLayer * menuButton;\n   65  \n   66  	// Undo button which lets the user go back a step in the solution.\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/KeyboardLayer.cpp:\n   61            horizontalGap = keyboardWidth * Q_KEYBOARD_KEY_X_GAP;\n   62  \n   63:     this->buttons = new std::vector<MenuButton*>();\n   64  \n   65      std::string rows[] = {\n   ..\n   76      for (int i = 0; i < 3; i++) {\n   77          for (int j = 0; j < rows[i].length(); j++) {\n   78:             auto button = MenuButton::create(std::string(1, rows[i].at(j)),\n   79                                           keyFontSize,\n   80                                           keyWidth,\n   ..\n  108  \n  109  int KeyboardLayer::indexForPoint(cocos2d::Vec2 * point) {\n  110:     for(std::vector<MenuButton *>::size_type i = 0; i != this->buttons->size(); i++) {\n  111:         MenuButton * button = (*this->buttons)[i];\n  112          if (button->getBounds()->containsPoint(*point)) {\n  113              return (int) i;\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/KeyboardLayer.h:\n    7  #include \"WordNode.h\"\n    8  #include \"BorderedWordNode.h\"\n    9: #include \"../../menu/MenuButton.h\"\n   10  \n   11  namespace QUAT {\n   ..\n   19  	cocos2d::Rect * bounds;\n   20  \n   21: 	std::vector<MenuButton*> * buttons;\n   22  \n   23  	float fontSize, keyboardHeight;\n\n59 matches across 9 files\n\n\nSearching 53 files for \"MenuButton\"\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/menu/MenuButton.cpp:\n    1: #include \"MenuButton.h\"\n    2  \n    3  #include <string>\n    .\n    7  namespace QUAT {\n    8  \n    9: void MenuButton::entered() {\n   10      this->selected(true);\n   11  }\n   12  \n   13: void MenuButton::left() {\n   14      this->selected(false);\n   15  }\n   16  \n   17: cocos2d::Rect * MenuButton::getBounds() {\n   18      return this->bounds;\n   19  }\n   ..\n   23  * is highlighted.\n   24  */\n   25: void MenuButton::selected(bool selected) {\n   26      this->background->setColor(selected ? *this->selectedColor : *this->defaultColor);\n   27      this->_selected = selected;\n   ..\n   29  \n   30  \n   31: bool MenuButton::isSelected() {\n   32      return this->_selected;\n   33  }\n   34  \n   35: void MenuButton::showBorder(bool showBorder) {\n   36      this->border->setVisible(showBorder);\n   37      this->background->setVisible(showBorder);\n   ..\n   41  * Sets the text of the button.\n   42  */\n   43: void MenuButton::setText(std::string text) {\n   44      this->textLabel->setString(text);\n   45  }\n   46  \n   47: const std::string MenuButton::getText() {\n   48      return this->textLabel->getString();\n   49  }\n   50  \n   51: MenuButton * MenuButton::create(std::string title, \n   52                 float fontSize, \n   53                 float width, \n   ..\n   55                 std::function<void(void)> callback)\n   56  {\n   57:     MenuButton *pRet = new(std::nothrow) MenuButton(title, \n   58                                                      fontSize, \n   59                                                      width, \n   ..\n   74  \n   75  \n   76: bool MenuButton::init() {\n   77  	// Init the super class\n   78      if ( !Clickable::init() )\n   ..\n   85  \n   86      this->upCallback = this->callback;\n   87:     this->enterCallback = CC_CALLBACK_0(MenuButton::entered, this);\n   88:     this->leaveCallback = CC_CALLBACK_0(MenuButton::left, this);\n   89  \n   90      this->textLabel = cocos2d::Label::createWithTTF(this->title, Q_FONT_PATH, this->fontSize);\n   ..\n  114  }\n  115  \n  116: MenuButton::MenuButton(std::string title, \n  117                 float fontSize, \n  118                 float width, \n\n/home/artemis/Developer/quat-mobile/cpp/Classes/menu/MenuButton.h:\n   10  namespace QUAT {\n   11  \n   12: class MenuButton : public Clickable\n   13  {\n   14  private:\n   ..\n   70  	const std::string getText();\n   71  	\n   72: 	MenuButton(std::string title, \n   73  			   float fontSize, \n   74  			   float width, \n   ..\n   76  			   std::function<void(void)> callback);\n   77  	\n   78: 	static MenuButton * create(std::string title, \n   79  							   float fontSize, \n   80  							   float width, \n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.cpp:\n    1: #include \"MenuButtonLayer.h\"\n    2  \n    3  namespace QUAT {\n    4: void MenuButtonLayer::up() {\n    5  	cocos2d::log(\"Clicked menu button\");\n    6  }\n    7  \n    8: void MenuButtonLayer::entered() {\n    9  }\n   10: void MenuButtonLayer::left() {\n   11  }\n   12: bool MenuButtonLayer::init() {\n   13  	// Init the super class\n   14      if ( !Clickable::init() )\n   ..\n   17      }\n   18  \n   19:     this->enterCallback = CC_CALLBACK_0(MenuButtonLayer::entered, this);\n   20:     this->leaveCallback = CC_CALLBACK_0(MenuButtonLayer::left, this);\n   21:     this->upCallback = CC_CALLBACK_0(MenuButtonLayer::up, this);\n   22  \n   23      this->circle = RectRadius::create(this->_size, \n   ..\n   38  }\n   39  \n   40: void MenuButtonLayer::recalculateBounds() {\n   41      this->bounds->setRect(this->getPositionX() - this->_size, \n   42                            this->getPositionY() - this->_size, \n   ..\n   46  \n   47  \n   48: MenuButtonLayer::MenuButtonLayer(float size) {\n   49  	this->_size = size;\n   50  }\n   51  \n   52: MenuButtonLayer * MenuButtonLayer::create(float size)\n   53  {\n   54:     MenuButtonLayer *pRet = new(std::nothrow) MenuButtonLayer(size);\n   55      if (pRet && pRet->init())\n   56      {\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.h:\n    9  namespace QUAT {\n   10  \n   11: class MenuButtonLayer : public Clickable\n   12  {\n   13  private:\n   ..\n   23  	bool init();\n   24  	\n   25: 	MenuButtonLayer(float size);\n   26  	\n   27: 	static MenuButtonLayer * create(float size);\n   28  };\n   29  \n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.cpp:\n  245      this->addChild(this->stepsLayer);\n  246  \n  247:     float menuButtonSize   = width * Q_MENUBTN_SIZE,\n  248:           menuButtonOffset = width * Q_MENUBTN_OFFSET;\n  249:     this->menuButton = MenuButtonLayer::create(menuButtonSize);\n  250:     this->menuButton->setPositionX(menuButtonOffset);\n  251:     this->menuButton->setPositionY(height - menuButtonOffset);\n  252:     this->addChild(this->menuButton);\n  253      \n  254      /*=====  End of Initialization of GUI elements  ======*/\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.h:\n    9  // General menu button, not really sure if this should be used in this class\n   10  // yet but it's fine for right now\n   11: #include \"MenuButtonLayer.h\"\n   12  \n   13  // All of the elements necessary for input to the game state\n   ..\n   62  	// Menu button that the user can press to reach the \"menu\", an about screen\n   63  	// with statistics and other information about the game.\n   64: 	MenuButtonLayer * menuButton;\n   65  \n   66  	// Undo button which lets the user go back a step in the solution.\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/KeyboardLayer.cpp:\n   61            horizontalGap = keyboardWidth * Q_KEYBOARD_KEY_X_GAP;\n   62  \n   63:     this->buttons = new std::vector<MenuButton*>();\n   64  \n   65      std::string rows[] = {\n   ..\n   76      for (int i = 0; i < 3; i++) {\n   77          for (int j = 0; j < rows[i].length(); j++) {\n   78:             auto button = MenuButton::create(std::string(1, rows[i].at(j)),\n   79                                           keyFontSize,\n   80                                           keyWidth,\n   ..\n  108  \n  109  int KeyboardLayer::indexForPoint(cocos2d::Vec2 * point) {\n  110:     for(std::vector<MenuButton *>::size_type i = 0; i != this->buttons->size(); i++) {\n  111:         MenuButton * button = (*this->buttons)[i];\n  112          if (button->getBounds()->containsPoint(*point)) {\n  113              return (int) i;\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/KeyboardLayer.h:\n    7  #include \"WordNode.h\"\n    8  #include \"BorderedWordNode.h\"\n    9: #include \"../../menu/MenuButton.h\"\n   10  \n   11  namespace QUAT {\n   ..\n   19  	cocos2d::Rect * bounds;\n   20  \n   21: 	std::vector<MenuButton*> * buttons;\n   22  \n   23  	float fontSize, keyboardHeight;\n\n58 matches across 8 files\n\n\nSearching 53 files for \"MenuButton\"\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/GameScene.cpp:\n    4  #include \"BackgroundLayer.h\"\n    5  #include \"solver/PuzzleLayer.h\"\n    6: #include \"menu/MenuButton.h\"\n    7  \n    8  namespace QUAT {\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.cpp:\n    1: #include \"MenuButtonLayer.h\"\n    2  \n    3  namespace QUAT {\n    4: void MenuButtonLayer::up() {\n    5  	cocos2d::log(\"Clicked menu button\");\n    6  }\n    7  \n    8: void MenuButtonLayer::entered() {\n    9  }\n   10: void MenuButtonLayer::left() {\n   11  }\n   12: bool MenuButtonLayer::init() {\n   13  	// Init the super class\n   14      if ( !Clickable::init() )\n   ..\n   17      }\n   18  \n   19:     this->enterCallback = CC_CALLBACK_0(MenuButtonLayer::entered, this);\n   20:     this->leaveCallback = CC_CALLBACK_0(MenuButtonLayer::left, this);\n   21:     this->upCallback = CC_CALLBACK_0(MenuButtonLayer::up, this);\n   22  \n   23      this->circle = RectRadius::create(this->_size, \n   ..\n   38  }\n   39  \n   40: void MenuButtonLayer::recalculateBounds() {\n   41      this->bounds->setRect(this->getPositionX() - this->_size, \n   42                            this->getPositionY() - this->_size, \n   ..\n   46  \n   47  \n   48: MenuButtonLayer::MenuButtonLayer(float size) {\n   49  	this->_size = size;\n   50  }\n   51  \n   52: MenuButtonLayer * MenuButtonLayer::create(float size)\n   53  {\n   54:     MenuButtonLayer *pRet = new(std::nothrow) MenuButtonLayer(size);\n   55      if (pRet && pRet->init())\n   56      {\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.h:\n    9  namespace QUAT {\n   10  \n   11: class MenuButtonLayer : public Clickable\n   12  {\n   13  private:\n   ..\n   23  	bool init();\n   24  	\n   25: 	MenuButtonLayer(float size);\n   26  	\n   27: 	static MenuButtonLayer * create(float size);\n   28  };\n   29  \n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.cpp:\n  245      this->addChild(this->stepsLayer);\n  246  \n  247:     float menuButtonSize   = width * Q_MENUBTN_SIZE,\n  248:           menuButtonOffset = width * Q_MENUBTN_OFFSET;\n  249:     this->menuButton = MenuButtonLayer::create(menuButtonSize);\n  250:     this->menuButton->setPositionX(menuButtonOffset);\n  251:     this->menuButton->setPositionY(height - menuButtonOffset);\n  252:     this->addChild(this->menuButton);\n  253      \n  254      /*=====  End of Initialization of GUI elements  ======*/\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.h:\n    9  // General menu button, not really sure if this should be used in this class\n   10  // yet but it's fine for right now\n   11: #include \"MenuButtonLayer.h\"\n   12  \n   13  // All of the elements necessary for input to the game state\n   ..\n   62  	// Menu button that the user can press to reach the \"menu\", an about screen\n   63  	// with statistics and other information about the game.\n   64: 	MenuButtonLayer * menuButton;\n   65  \n   66  	// Undo button which lets the user go back a step in the solution.\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/KeyboardLayer.cpp:\n   61            horizontalGap = keyboardWidth * Q_KEYBOARD_KEY_X_GAP;\n   62  \n   63:     this->buttons = new std::vector<MenuButton*>();\n   64  \n   65      std::string rows[] = {\n   ..\n   76      for (int i = 0; i < 3; i++) {\n   77          for (int j = 0; j < rows[i].length(); j++) {\n   78:             auto button = MenuButton::create(std::string(1, rows[i].at(j)),\n   79                                           keyFontSize,\n   80                                           keyWidth,\n   ..\n  108  \n  109  int KeyboardLayer::indexForPoint(cocos2d::Vec2 * point) {\n  110:     for(std::vector<MenuButton *>::size_type i = 0; i != this->buttons->size(); i++) {\n  111:         MenuButton * button = (*this->buttons)[i];\n  112          if (button->getBounds()->containsPoint(*point)) {\n  113              return (int) i;\n\n/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/KeyboardLayer.h:\n    7  #include \"WordNode.h\"\n    8  #include \"BorderedWordNode.h\"\n    9: #include \"../../menu/MenuButton.h\"\n   10  \n   11  namespace QUAT {\n   ..\n   19  	cocos2d::Rect * bounds;\n   20  \n   21: 	std::vector<MenuButton*> * buttons;\n   22  \n   23  	float fontSize, keyboardHeight;\n\n38 matches across 7 files\n",
			"settings":
			{
				"buffer_size": 18179,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "cpp/Classes/solver/info/banner/BannerButtonLayer.h",
			"settings":
			{
				"buffer_size": 1385,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/info/StepsIndicatorLayer.h",
			"settings":
			{
				"buffer_size": 821,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/info/StepsIndicatorLayer.cpp",
			"settings":
			{
				"buffer_size": 1931,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/info/TextIndicatorLayer.cpp",
			"settings":
			{
				"buffer_size": 1278,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/solver/info/TextIndicatorLayer.h",
			"settings":
			{
				"buffer_size": 806,
				"line_ending": "Unix"
			}
		},
		{
			"file": "cpp/Classes/AppDelegate.cpp",
			"settings":
			{
				"buffer_size": 2950,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 117.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"it comm",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add All"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"Git comm",
				"Git: Commit"
			],
			[
				"git a",
				"Git: Add All"
			],
			[
				"it push",
				"Git: Push"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"Git add",
				"Git: Add All"
			],
			[
				"diff",
				"Git: Diff Current File"
			],
			[
				"git diff",
				"Git: Diff All Files"
			],
			[
				"gitcomm",
				"Git: Commit"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"it com",
				"Git: Commit"
			],
			[
				"git dif",
				"Git: Diff Current File"
			],
			[
				"GIT STATUS",
				"Git: Status"
			],
			[
				"git add ",
				"Git: Add All"
			],
			[
				"gitadd",
				"Git: Add All"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"package rem",
				"Package Control: Remove Package"
			],
			[
				"git in",
				"Git: Init"
			],
			[
				"git",
				"Git: Init"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 629.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/artemis/Developer/quat-mobile",
		"/home/artemis/Developer/quat-mobile/cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/menu",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input",
		"/home/artemis/Developer/quat-mobile/cpp/cocos2d",
		"/home/artemis/Developer/quat-mobile/cpp/cocos2d/cocos",
		"/home/artemis/Developer/quat-mobile/cpp/cocos2d/cocos/renderer",
		"/home/artemis/Developer/quat-mobile/js",
		"/home/artemis/Developer/quat-mobile/js/app",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver"
	],
	"file_history":
	[
		"/home/artemis/Developer/quat-mobile/cpp/cocos2d/cocos/renderer/ccShader_PositionColorLengthTexture.vert",
		"/home/artemis/Developer/quat-mobile/cpp/cocos2d/cocos/renderer/ccShader_PositionColorLengthTexture.frag",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/MenuButtonLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/menu/TextButton.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/menu/TextButton.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/KeyboardLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/UndoButtonLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/info/banner/BannerButtonLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/info/banner/BannerButtonLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/info/TextIndicatorLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/info/StepsIndicatorLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/AppDelegate.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/BorderedWordNode.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/SolverKeyboardManager.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/SolverTouchInputManager.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/info/banner/ExplodingCircle.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/info/banner/ExplodingCircle.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/SolverTouchInputManager.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/SolverKeyboardManager.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/info/DefinitionButtonLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/CMakeLists.txt",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input/UndoButtonLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/nodes/FixedDrawNode.h",
		"/home/artemis/Developer/quat-mobile/js/app/src/GameScene.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver/KeyboardLayer.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver/KeyboardInputManager.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/Game.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver/PuzzleLayer.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver/SolverTouchInputManager.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver/SolverStateController.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/StateController.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver/SolutionLayer.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/nodes/IconButton.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/menu/MenuButton.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/nodes/RectRadius.js",
		"/home/artemis/Developer/quat-mobile/js/app/src/solver/BorderedWordNode.js",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/TouchInputManager.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/DefinitionButtonLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/DefinitionButtonLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/TextIndicatorLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/TextIndicatorLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/GameScene.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/KeyboardLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/KeyboardLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/SolverKeyboardManager.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/UndoButtonLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/UndoButtonLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/StepsIndicatorLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/StepsIndicatorLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/SolverTouchInputManager.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/User.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/User.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/SolverStateController.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/menu/MenuButton.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/menu/MenuButton.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/BannerButtonLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/BannerButtonLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/Clickable.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/Clickable.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/WordNode.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/WordNode.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/BorderedWordNode.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/BorderedWordNode.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/SolverTouchInputManager.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/Game.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/Dictionary.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/Dictionary.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/Game.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/Puzzle.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/Puzzle.h",
		"/home/artemis/.i3/config",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/TouchInputManager.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/SolutionLayer.h",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/SolutionLayer.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/PuzzleManager.cpp",
		"/home/artemis/Developer/quat-mobile/cpp/Classes/models/PuzzleManager.h",
		"/home/artemis/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/artemis/.i3status.conf",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/models/User.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/models/User.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/models/Puzzle.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/models/Puzzle.cpp",
		"/home/caleb/Developer/quat-mobile/js/app/src/BackgroundLayer.js",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/GameScene.cpp",
		"/home/caleb/Developer/quat-mobile/js/data/math/src/Puzzle.java",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/nodes/RectRadius.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/menu/MenuButton.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/menu/MenuButton.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/nodes/RectRadius.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/PuzzleLayer.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/SolverStateController.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/SolverStateController.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/BorderedWordNode.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/BorderedWordNode.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/SolutionLayer.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/SolutionLayer.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/KeyboardLayer.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/KeyboardLayer.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/GameScene.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/AppDelegate.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/Clickable.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/WordNode.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/solver/WordNode.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/StateController.h",
		"/home/caleb/Developer/quat-mobile/cpp/CMakeLists.txt",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/StateController.cpp",
		"/home/caleb/Developer/quat-mobile/.gitignore",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/BackgroundLayer.cpp",
		"/home/caleb/Developer/quat-mobile/test.git",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/models/Game.cpp",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/models/Game.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/BackgroundLayer.h",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/AppDelegate.h",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/MyGame.dir/link.txt",
		"/home/caleb/Developer/quat-mobile/cpp/Classes/HelloWorldScene.cpp",
		"/home/caleb/Developer/quat-mobile/js/app/main.js",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeCache.txt",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/CMakeRuleHashes.txt",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/Makefile.cmake",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/Makefile2",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/MyGame.dir/DependInfo.cmake",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/MyGame.dir/build.make",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/MyGame.dir/cmake_clean.cmake",
		"/home/caleb/Developer/quat-mobile/cpp/linux-build/CMakeFiles/MyGame.dir/depend.internal"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/artemis/Developer/quat-mobile/cpp/Classes",
			"/home/artemis/Developer/quat-mobile/cpp/Classes/solver/input",
			"/home/artemis/Developer/quat-mobile/cpp/Classes/menu",
			"/home/artemis/Developer/quat-mobile/cpp/Classes",
			"/home/caleb/Developer/quat-mobile/cpp/Classes",
			"/home/caleb/Developer/quat-mobile/js/app",
			"/home/caleb/Developer/quat-mobile/cpp/Classes",
			"/home/caleb/Developer/quat-mobile/js/app",
			"/home/caleb/Developer/quat-mobile/cpp/linux-build",
			"/home/caleb/Developer/quat-mobile/cpp",
			"/home/caleb/Developer/quat-mobile/cpp/proj.ios_mac",
			"/home/caleb/Developer/quat-mobile/app/src",
			"/home/caleb/Developer/quat-mobile/app/src/solver",
			"/home/caleb/Developer/quat-mobile/app/src",
			"/home/caleb/Developer/quat-mobile/app/src/solver",
			"/home/caleb/Developer/quat-mobile/app/src",
			"/home/caleb/Developer/quat-mobile/app/src/solver",
			"/home/caleb/Developer/quat-mobile/app",
			"/home/caleb/Developer/GLS/torpedo",
			"/home/caleb/Developer/python/proto",
			"/home/caleb/Developer/python/proto/proto",
			"/home/caleb/Developer/cocos2d-x-3.8.1/QUAT",
			"/home/caleb/Developer/cyto/cyto",
			"/home/caleb/Developer/cyto/apache-servicemix-5.4.0",
			"/home/caleb/Developer/cyto/camel",
			"/home/caleb/Developer/cyto/camel/camel-core/src/main/java/org/apache/camel/component/file",
			"/home/caleb/Developer/cyto",
			"/home/caleb/Developer/cyto/apache-servicemix-5.4.0",
			"/home/caleb/Developer/cyto/camel/camel-core/src/main/java/org/apache/camel",
			"/home/caleb/Developer/cyto/camel/components/camel-exec/src/main/java/org/apache/camel/component/exec"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"PUZZLE_LAYER",
			"quatLogo",
			"currentWord",
			"PuzzleLayer",
			"MenuButtonLayer",
			"MenuButton",
			"1.25",
			"Q_KEYBOARD_SLIDE",
			"renderTexture",
			"RenderTexture",
			"renderTexture",
			"MenuButton",
			"\"fonts/Arimo-Regular.ttf\"",
			"Q_KEYBRD_SLIDE",
			"0.08",
			"\"cppquat\"",
			"APP_DELEGATE",
			"_APP_DELEGATE_H_",
			"APP_DELEGATE",
			"MyGame",
			"Classes",
			"bannerButton",
			"0.75",
			";",
			");\n",
			";",
			");\n",
			";",
			"	",
			"RectRadius",
			"node",
			"Node",
			"node",
			"Node",
			"node",
			"ExplodingCircle::",
			"Node",
			"node",
			"RectRadius",
			"FixedDrawNode",
			"FIXED_DRAW_NODE",
			".cpp",
			"View Manipulation Methods",
			"float fontSize",
			"TextIndicatorLayer",
			"__TEXT_INDICATOR_LAYER_H__",
			"TEXT_INDICATOR_LAYER",
			"__TEXT_INDICATOR_LAYER_H__",
			"TEXT_INDICATOR_LAYER",
			"this->banner",
			"WHITE",
			"Done",
			"Done!",
			"raise",
			"newVal",
			"->(",
			"this->undo",
			"subtext",
			"StepsIndicatorLayer",
			"KeyboardLayer",
			"KEYBOARD_LAYER",
			"undoSize",
			"this->undo",
			"(\".",
			"BannerButtonLayer",
			"height",
			"BannerButtonLayer",
			"ANNER_BUTTON",
			"size",
			"height",
			"BannerButtonLayer",
			"BANNER_BUTTON_LAYER",
			"0.25",
			";",
			"puzzle->getStepCount()",
			"this->stepText",
			"this->subtext",
			"fontSize",
			"textLabel",
			"this->textLabel",
			"float size",
			"UndoButtonLayer",
			"float size",
			"UNDO_LAYER",
			"left",
			"\");\n",
			"undo",
			"Undo",
			"undo",
			"Undo",
			"undo",
			"float height",
			"BannerButtonLayer",
			";",
			"float height",
			"BannerButtonLayer",
			"BANNER_BUTTON_LAYER_H",
			"log",
			"this->_height",
			"banner",
			"Banner",
			"banner",
			"undo",
			"fontSize",
			"BorderedWordNode",
			"BORDERED_WORD_NODE_H",
			");\n",
			"downCallback",
			"PuzzleLayer",
			"Width",
			"width",
			"MenuButton",
			";",
			"*",
			"// ",
			"solutionLayer",
			"this->solutionLayer",
			"->solutionLayer",
			"this->solutionLayer",
			"->solutionLayer",
			"this._savePath",
			"startIndex",
			"//",
			" // ",
			"Byte",
			"firstBytes",
			";",
			"puzzles"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"TextButton",
			"Q_FONT_PATH",
			"finish",
			"start",
			"Arimo-Regular",
			"QuatGame",
			"sliderLayer",
			"],\\n[",
			"darkForeground",
			"this.GSC",
			"gameBounds",
			"TouchInputManager",
			"solver.GameStateController",
			"setCurrentWordOpacity",
			"puzzleLayer",
			"GESTURING",
			"this.sc.state",
			"bottomOfCurrentWord"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "cpp/Classes/Constants.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10457,
						"regions":
						{
						},
						"selection":
						[
							[
								920,
								920
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/artemis/.i3/config",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5441,
						"regions":
						{
						},
						"selection":
						[
							[
								834,
								834
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 119.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "cpp/cocos2d/cocos/renderer/ccShader_PositionColorLengthTexture.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1755,
						"regions":
						{
						},
						"selection":
						[
							[
								1203,
								1203
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "cpp/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7235,
						"regions":
						{
						},
						"selection":
						[
							[
								5142,
								5142
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1938.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "cpp/Classes/solver/input/KeyboardLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1262,
						"regions":
						{
						},
						"selection":
						[
							[
								702,
								702
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "cpp/Classes/GameScene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1865,
						"regions":
						{
						},
						"selection":
						[
							[
								708,
								708
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "cpp/Classes/MenuButtonLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 484,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "cpp/Classes/solver/PuzzleLayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13068,
						"regions":
						{
						},
						"selection":
						[
							[
								5427,
								5427
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2745.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "cpp/Classes/menu/MenuLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1006,
						"regions":
						{
						},
						"selection":
						[
							[
								14,
								14
							],
							[
								39,
								39
							],
							[
								995,
								995
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "cpp/Classes/menu/MenuLayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1359,
						"regions":
						{
						},
						"selection":
						[
							[
								1073,
								1073
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "cpp/Classes/solver/PuzzleLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8824,
						"regions":
						{
						},
						"selection":
						[
							[
								8824,
								8824
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "cpp/Classes/GameScene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1472,
						"regions":
						{
						},
						"selection":
						[
							[
								765,
								765
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "cpp/Classes/solver/input/BorderedWordNode.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3198,
						"regions":
						{
						},
						"selection":
						[
							[
								2041,
								2041
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 894.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "cpp/Classes/solver/input/BorderedWordNode.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 806,
						"regions":
						{
						},
						"selection":
						[
							[
								116,
								116
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "cpp/Classes/solver/input/WordNode.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3214,
						"regions":
						{
						},
						"selection":
						[
							[
								1245,
								1245
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "cpp/Classes/solver/input/UndoButtonLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 427,
						"regions":
						{
						},
						"selection":
						[
							[
								97,
								97
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "cpp/Classes/solver/input/KeyboardLayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3878,
						"regions":
						{
						},
						"selection":
						[
							[
								1737,
								1737
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "cpp/Classes/solver/info/banner/BannerButtonLayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3784,
						"regions":
						{
						},
						"selection":
						[
							[
								334,
								334
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "cpp/Classes/solver/input/WordNode.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1939,
						"regions":
						{
						},
						"selection":
						[
							[
								871,
								871
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 19,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18179,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										197,
										207
									],
									[
										330,
										340
									],
									[
										427,
										437
									],
									[
										513,
										523
									],
									[
										608,
										618
									],
									[
										728,
										738
									],
									[
										933,
										943
									],
									[
										1024,
										1034
									],
									[
										1234,
										1244
									],
									[
										1361,
										1371
									],
									[
										1457,
										1467
									],
									[
										1470,
										1480
									],
									[
										1668,
										1678
									],
									[
										1705,
										1715
									],
									[
										1895,
										1905
									],
									[
										2092,
										2102
									],
									[
										2167,
										2177
									],
									[
										2332,
										2342
									],
									[
										2344,
										2354
									],
									[
										2563,
										2573
									],
									[
										2678,
										2688
									],
									[
										2846,
										2856
									],
									[
										3045,
										3055
									],
									[
										3108,
										3118
									],
									[
										3206,
										3216
									],
									[
										3256,
										3266
									],
									[
										3303,
										3313
									],
									[
										3472,
										3482
									],
									[
										3552,
										3562
									],
									[
										3626,
										3636
									],
									[
										3756,
										3766
									],
									[
										3964,
										3974
									],
									[
										3981,
										3991
									],
									[
										4063,
										4073
									],
									[
										4081,
										4091
									],
									[
										4137,
										4147
									],
									[
										4179,
										4189
									],
									[
										4372,
										4382
									],
									[
										4476,
										4486
									],
									[
										4529,
										4539
									],
									[
										4728,
										4738
									],
									[
										4788,
										4798
									],
									[
										4850,
										4860
									],
									[
										4863,
										4873
									],
									[
										4887,
										4897
									],
									[
										4921,
										4931
									],
									[
										4946,
										4956
									],
									[
										4982,
										4992
									],
									[
										5016,
										5026
									],
									[
										5067,
										5077
									],
									[
										5374,
										5384
									],
									[
										5632,
										5642
									],
									[
										5650,
										5660
									],
									[
										5948,
										5958
									],
									[
										6146,
										6156
									],
									[
										6421,
										6431
									],
									[
										6503,
										6513
									],
									[
										6819,
										6829
									],
									[
										6931,
										6941
									],
									[
										7155,
										7165
									],
									[
										7252,
										7262
									],
									[
										7338,
										7348
									],
									[
										7433,
										7443
									],
									[
										7553,
										7563
									],
									[
										7758,
										7768
									],
									[
										7849,
										7859
									],
									[
										8059,
										8069
									],
									[
										8186,
										8196
									],
									[
										8282,
										8292
									],
									[
										8295,
										8305
									],
									[
										8493,
										8503
									],
									[
										8530,
										8540
									],
									[
										8720,
										8730
									],
									[
										8917,
										8927
									],
									[
										8992,
										9002
									],
									[
										9157,
										9167
									],
									[
										9169,
										9179
									],
									[
										9388,
										9398
									],
									[
										9503,
										9513
									],
									[
										9671,
										9681
									],
									[
										9870,
										9880
									],
									[
										9933,
										9943
									],
									[
										10031,
										10041
									],
									[
										10081,
										10091
									],
									[
										10128,
										10138
									],
									[
										10297,
										10307
									],
									[
										10377,
										10387
									],
									[
										10451,
										10461
									],
									[
										10581,
										10591
									],
									[
										10789,
										10799
									],
									[
										10806,
										10816
									],
									[
										10888,
										10898
									],
									[
										10906,
										10916
									],
									[
										10962,
										10972
									],
									[
										11004,
										11014
									],
									[
										11197,
										11207
									],
									[
										11301,
										11311
									],
									[
										11354,
										11364
									],
									[
										11553,
										11563
									],
									[
										11613,
										11623
									],
									[
										11675,
										11685
									],
									[
										11688,
										11698
									],
									[
										11712,
										11722
									],
									[
										11746,
										11756
									],
									[
										11771,
										11781
									],
									[
										11807,
										11817
									],
									[
										11841,
										11851
									],
									[
										11892,
										11902
									],
									[
										12199,
										12209
									],
									[
										12457,
										12467
									],
									[
										12475,
										12485
									],
									[
										12773,
										12783
									],
									[
										12971,
										12981
									],
									[
										13246,
										13256
									],
									[
										13328,
										13338
									],
									[
										13644,
										13654
									],
									[
										13756,
										13766
									],
									[
										14054,
										14064
									],
									[
										14194,
										14204
									],
									[
										14257,
										14267
									],
									[
										14355,
										14365
									],
									[
										14405,
										14415
									],
									[
										14452,
										14462
									],
									[
										14621,
										14631
									],
									[
										14701,
										14711
									],
									[
										14775,
										14785
									],
									[
										14905,
										14915
									],
									[
										15113,
										15123
									],
									[
										15130,
										15140
									],
									[
										15212,
										15222
									],
									[
										15230,
										15240
									],
									[
										15286,
										15296
									],
									[
										15328,
										15338
									],
									[
										15521,
										15531
									],
									[
										15625,
										15635
									],
									[
										15678,
										15688
									],
									[
										15877,
										15887
									],
									[
										15937,
										15947
									],
									[
										15999,
										16009
									],
									[
										16012,
										16022
									],
									[
										16036,
										16046
									],
									[
										16070,
										16080
									],
									[
										16095,
										16105
									],
									[
										16131,
										16141
									],
									[
										16165,
										16175
									],
									[
										16216,
										16226
									],
									[
										16523,
										16533
									],
									[
										16781,
										16791
									],
									[
										16799,
										16809
									],
									[
										17097,
										17107
									],
									[
										17295,
										17305
									],
									[
										17570,
										17580
									],
									[
										17652,
										17662
									],
									[
										17968,
										17978
									],
									[
										18080,
										18090
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								13857,
								13857
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ 	].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 7361.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "cpp/Classes/solver/info/banner/BannerButtonLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1385,
						"regions":
						{
						},
						"selection":
						[
							[
								151,
								151
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "cpp/Classes/solver/info/StepsIndicatorLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 821,
						"regions":
						{
						},
						"selection":
						[
							[
								285,
								285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "cpp/Classes/solver/info/StepsIndicatorLayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1931,
						"regions":
						{
						},
						"selection":
						[
							[
								728,
								728
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "cpp/Classes/solver/info/TextIndicatorLayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1278,
						"regions":
						{
						},
						"selection":
						[
							[
								103,
								103
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "cpp/Classes/solver/info/TextIndicatorLayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 806,
						"regions":
						{
						},
						"selection":
						[
							[
								121,
								121
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "cpp/Classes/AppDelegate.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2950,
						"regions":
						{
						},
						"selection":
						[
							[
								792,
								792
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 230.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 189.0
	},
	"pinned_build_system": "Packages/User/cocos.sublime-build",
	"project": "quat-mobile.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"menu",
				"cpp/Classes/menu/MenuButton.cpp"
			],
			[
				"stim",
				"cpp/Classes/solver/SolverTouchInputManager.h"
			],
			[
				"puzzlel",
				"cpp/Classes/solver/PuzzleLayer.h"
			],
			[
				"ke",
				"cpp/Classes/solver/KeyboardLayer.h"
			],
			[
				"puz",
				"app/src/solver/PuzzleLayer.js"
			],
			[
				"men",
				"app/src/menu/MenuButton.js"
			],
			[
				"look",
				"app/src/look/LookLayer.js"
			],
			[
				"gamesc",
				"app/src/GameScene.js"
			],
			[
				"stat",
				"app/src/GameStateController.js"
			],
			[
				"games",
				"app/src/GameScene.js"
			],
			[
				"puzzl",
				"app/src/solver/PuzzleLayer.js"
			],
			[
				"theme",
				"app/src/themes.js"
			],
			[
				"game",
				"app/src/Game.js"
			],
			[
				"ssc",
				"app/src/GameStateController.js"
			],
			[
				"gams",
				"app/src/GameScene.js"
			],
			[
				"puzzlela",
				"app/src/solver/PuzzleLayer.js"
			],
			[
				"inpu",
				"app/src/GameTouchInputManager.js"
			],
			[
				"tex",
				"app/src/solver/TextIndicatorLayer.js"
			],
			[
				"controller",
				"app/src/GameStateController.js"
			],
			[
				"sol",
				"app/src/solver/SolutionLayer.js"
			],
			[
				"borde",
				"app/src/solver/BorderedWordNode.js"
			],
			[
				"menubu",
				"app/src/menu/MenuButton.js"
			],
			[
				"wordno",
				"app/src/solver/WordNode.js"
			],
			[
				"input",
				"app/src/solver/SolverTouchInputManager.js"
			],
			[
				"puzz",
				"app/src/solver/PuzzleLayer.js"
			],
			[
				"soluti",
				"app/src/solver/SolutionLayer.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 494.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
